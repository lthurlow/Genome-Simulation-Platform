head	1.6;
access;
symbols;
locks
	lthurlow:1.6; strict;
comment	@// @;


1.6
date	2012.07.27.19.46.36;	author lthurlow;	state Exp;
branches;
next	1.5;

1.5
date	2012.07.27.00.02.06;	author lthurlow;	state Exp;
branches;
next	1.4;

1.4
date	2012.07.23.17.33.20;	author lthurlow;	state Exp;
branches;
next	1.3;

1.3
date	2012.07.20.17.51.45;	author lthurlow;	state Exp;
branches;
next	1.2;

1.2
date	2012.07.20.05.58.00;	author lthurlow;	state Exp;
branches;
next	1.1;

1.1
date	2012.07.19.21.46.35;	author lthurlow;	state Exp;
branches;
next	;


desc
@7/19/12
Epty file, will contain the simulation headers
@


1.6
log
@7/27/12
Note that I labeled sim.cc 6/27/12 but today is the 27th of JUly!
@
text
@#ifndef _SIM_HPP_
#define _SIM_HPP_

#include <vector> // for vectors
#include <set> // for sets
#include <queue> // for priority queue

#include "types.hpp"
#include "randvars2.hpp"
#include "bgl_graph_info.hpp"
#include "routing.hpp"

typedef std::vector<std::pair<int,int> > paths;
//typedef std::set<std::pair<int, int> > edge_in_use;
typedef std::pair<int,int> apair;
typedef std::map<apair, int> edge_set;

extern long sim_time; // requires extern so i dont have to use namespace to access

/*
* This section is covered on pg. 3 of notebook, laying out requirements.
* Notes can also be found on pg. 21 and 22.

* Active Request will be used to keep track and maintain current requests
* as well as to determine if requests are waiting on an active request.
*/

class active_request{
  private:
    long tcre;                              //Time request was created.
    long etoc;                              //expected time of completion
    long tcom;                              // Time completed, ^seperate for ease
    long lupd;                              //last time updated
    double bwbottle;                        //bandwidth bottleneck
    int data_trans;                         //amount of data transfered so far
    int pop;                                //popularity of the object
    std::vector<std::pair<int,int> > *path; //all links used by request
    Request req;
  public:
    long get_etoc(void) const { return etoc; }
    long get_tcom(void) const { return tcom; }
    long get_tcre(void) const { return tcre; }
    long get_lupd(void) const { return lupd; }
    double get_bb(void) const { return bwbottle; }
    int get_dt(void)    const { return data_trans; }
    int get_pop(void)   const { return pop; }
    Request get_req(void)     { return req;}
    paths* get_path(void)      { return path; }

    void set_etoc(long e)   { etoc = e; }
    void set_tcom(long t)   { tcom = t; }
    void set_tcre(long t)   { tcre = t; }
    void set_lupd(long u)   { lupd = u; }
    void set_bb(double b)   { bwbottle = b; }
    void set_dt(int d)      { data_trans = d; }
    void set_pop(int p)     { pop = p; }
    void set_req(Request r) { req = r;}
    void set_path(paths *p) { path = p; }
    
};

//Required that functions return constants
//Must have inline function, as defined in header
inline bool operator<(const active_request &a, const active_request &b) {
  return a.get_etoc() > b.get_etoc();
}

typedef active_request* AR;

void sim(Graph *g, UI i, Routes *R, next_hop hop, Policy P);
void single_server(Graph *g, UI i, Routes *R, next_hop hop);
Request get_new_request(long *label, UI in, std::set<long> comp);
AR fulfil(Graph *G, Routes *ro, Request r, std::vector<AR> *a, next_hop h);
void rm_req(Graph *G, Routes *ro, AR *out, std::vector<AR> *A,
            std::priority_queue<AR> *fin, std::set<long> *comp);
void manage_paths(Graph *G, AR *a, paths p, std::vector<AR> *actives,int add);
void adjust_paths(Graph *G, std::pair<int,int> p, std::vector<AR> *actives);

void print_active(AR ar);
void print_path(paths *p);


#endif
@


1.5
log
@7/26/12
Working on getting entire sim built. not there.
@
text
@d4 3
a6 2
#include <vector>
#include <set>
d15 2
a16 1
typedef std::map<std::pair<int, int>,int> edge_set;
d30 8
a37 8
    long tcre;                             //Time request was created.
    long etoc;                             //expected time of completion
    long tcom;                             // Time completed, ^seperate for ease
    long lupd;                             //last time updated
    double bwbottle;                       //bandwidth bottleneck
    int data_trans;                        //amount of data transfered so far
    int pop;                               //popularity of the object
    std::vector<std::pair<int,int> > path; //all links used by request
d48 1
a48 1
    paths get_path(void)      { return path; }
d58 1
a58 1
    void set_path(paths p)  { path = p; }
d72 1
a72 1
Request get_new_request(long label, UI in, std::set<long> comp);
d74 2
d79 4
@


1.4
log
@7/23/12
Changing header information in order to work with the cc file
@
text
@d5 1
a9 1
#include "simulation.hpp"
d12 5
a16 2
void sim(Graph g, UI i, Routes *R, Policy P);
void single_server(Graph g, UI i, Routes *R);
a17 1
Request get_new_request(long time, long label, UI in);
d32 1
a32 1
    int bwbottle;                          //bandwidth bottleneck
d42 1
a42 1
    int get_bb(void)    const { return bwbottle; }
d46 1
a46 1
    std::vector<std::pair<int,int> > get_path(void){ return path; }
d52 1
a52 1
    void set_bb(int b)      { bwbottle = b; }
d55 2
a56 2
    void get_req(Request r) { req = r;}
    void set_path(std::vector<std::pair<int,int> > p){ path = p; }
d68 6
a73 10
/*
class hold_request{
  private:
    std::pair<request,long> req;
  public:
    std::pair<request,long> get_hold(void) {return req; }
    long get_time(void) const { return req.second; }
    request get_req(void){ return req.first; }
    void set_hold(std::pair<request, long> p){ req = p; }
};
a74 2
typedef hold_request* H;
*/
@


1.3
log
@changed to pointers for routes
@
text
@d4 2
d12 64
a75 2
void sim(Graph g, Request r, Routes *R, Policy P);
void single_server(Graph g, Request r, Routes *R);
d77 2
@


1.2
log
@*** empty log message ***
@
text
@d10 2
a11 1
void sim(Graph g, Request r, Routes R);
@


1.1
log
@Initial revision
@
text
@d1 12
@
