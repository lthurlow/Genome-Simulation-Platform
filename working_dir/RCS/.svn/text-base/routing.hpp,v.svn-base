head	1.8;
access;
symbols;
locks
	lthurlow:1.8; strict;
comment	@// @;


1.8
date	2012.09.21.23.42.29;	author lthurlow;	state Exp;
branches;
next	1.7;

1.7
date	2012.09.06.17.47.06;	author lthurlow;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.23.20.40.24;	author lthurlow;	state Exp;
branches;
next	1.5;

1.5
date	2012.07.27.00.02.06;	author lthurlow;	state Exp;
branches;
next	1.4;

1.4
date	2012.07.20.17.51.45;	author lthurlow;	state Exp;
branches;
next	1.3;

1.3
date	2012.07.20.05.58.00;	author lthurlow;	state Exp;
branches;
next	1.2;

1.2
date	2012.07.19.21.46.35;	author lthurlow;	state Exp;
branches;
next	1.1;

1.1
date	2012.07.09.22.56.42;	author lthurlow;	state Exp;
branches;
next	;


desc
@@


1.8
log
@9/21/12
Moved prototypes for simgrid to simgrid.hpp
@
text
@#ifndef _ROUTING_HPP_
#define _ROUTING_HPP_

#include "types.hpp"
#include "bgl_graph_info.hpp"

typedef std::vector<std::vector<double> > Routes;
typedef std::vector<vertex_descriptor> node_hop;
typedef std::vector<std::vector<vertex_descriptor> >next_hop;

next_hop build_forwarding_tables(Graph G, int route, Routes *R);
next_hop ospf(Graph G, Routes *R);

/* This code is from: 
 * http://www.boost.org/doc/libs/1_42_0/libs/graph/example/dave.cpp
 * It is used to ensure that I can also use dijkstra's visitor algorithm
 * to generate a predecessor map for routing.
 */
template <class NewGraph, class Tag>
struct graph_copier : public boost::base_visitor<graph_copier<NewGraph, Tag> >{
  typedef Tag event_filter;
  graph_copier(NewGraph& graph) : new_g(graph) { }
  template <class Edge, class Graph>
  void operator()(Edge e, Graph& g) {
    add_edge(source(e, g), target(e, g), new_g);
  }
  private:
  NewGraph& new_g;
};
template <class NewGraph, class Tag>
inline graph_copier<NewGraph, Tag> copy_graph(NewGraph& g, Tag) {
  return graph_copier<NewGraph, Tag>(g);
}


#endif

/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
@


1.7
log
@*** empty log message ***
@
text
@a34 6
/*The should be in simgrid.hpp but due to circular includes that I dont want to
  * fix right now, and that I need to remove simgrid.hpp from includes in main,
  * main still needs to know of these functions
*/
void write_platform(Graph *G, next_hop *H, UI in);
void write_deploy(Graph *G, next_hop *H);
@


1.6
log
@8/23/12
@
text
@d35 7
@


1.5
log
@7/26/12
no change
@
text
@d8 2
a9 1
typedef std::vector<vertex_descriptor> next_hop;
@


1.4
log
@changed to pointers for routes
@
text
@a4 1
#include "routing.hpp"
d7 26
a32 2
void build_forwarding_tables(Graph G, int route, Routes *R);
void ospf(Graph G, Routes *R);
d35 28
@


1.3
log
@*** empty log message ***
@
text
@d8 2
a9 14
/*
template <typename Graph, typename DijkstraVisitor, typename PredecessorMap,
          typename DistanceMap, typename WeightMap, typename VertexIndexMap,
          typename CompareFunction, typename CombineFunction, typename DistInf,
          typename DistZero, typename ColorMap>
void dijkstra_shortest_paths(
          const Graph& g, typename boost::graph_traits<Graph>::vertex_descriptor s,
          PredecessorMap predecessor, DistanceMap distance, WeightMap weight,
          VertexIndexMap index_map, CompareFunction compare, 
          CombineFunction combine, DistInf inf, DistZero zero, 
          DijkstraVisitor vis, ColorMap color);
*/
void build_forwarding_tables(Graph G, int route, Routes R);
void ospf(Graph G, Routes R);
@


1.2
log
@7/19/12
No major changes
@
text
@d20 2
a21 1
void ospf(Graph G);
@


1.1
log
@Initial revision
@
text
@d8 12
@
