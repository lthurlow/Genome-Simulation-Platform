head	1.11;
access;
symbols;
locks
	lthurlow:1.11; strict;
comment	@// @;


1.11
date	2012.08.27.23.49.49;	author lthurlow;	state Exp;
branches;
next	1.10;

1.10
date	2012.08.23.20.40.24;	author lthurlow;	state Exp;
branches;
next	1.9;

1.9
date	2012.08.07.19.20.26;	author lthurlow;	state Exp;
branches;
next	1.8;

1.8
date	2012.08.03.22.02.19;	author lthurlow;	state Exp;
branches;
next	1.7;

1.7
date	2012.07.27.19.46.36;	author lthurlow;	state Exp;
branches;
next	1.6;

1.6
date	2012.07.27.00.02.06;	author lthurlow;	state Exp;
branches;
next	1.5;

1.5
date	2012.07.23.17.33.20;	author lthurlow;	state Exp;
branches;
next	1.4;

1.4
date	2012.07.20.17.51.45;	author lthurlow;	state Exp;
branches;
next	1.3;

1.3
date	2012.07.20.17.18.19;	author lthurlow;	state Exp;
branches;
next	1.2;

1.2
date	2012.07.20.05.58.00;	author lthurlow;	state Exp;
branches;
next	1.1;

1.1
date	2012.07.19.21.46.35;	author lthurlow;	state Exp;
branches;
next	;


desc
@7/19/12
Empty File, will contain the simulation code
@


1.11
log
@*** empty log message ***
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <limits.h> // for max size of int
#include <float.h> //for max size of double
#include <string>
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <boost/tuple/tuple.hpp>
#include <boost/graph/graphviz.hpp>
#include <boost/graph/dijkstra_shortest_paths.hpp>
#include <boost/lexical_cast.hpp>
#include <gsl/gsl_rng.h>

#include "simulation.hpp"

using namespace std;
using namespace boost;

//Required that functions return constants
//Must have inline function, as defined in header
inline bool operator<(const request &a, const request &b) {
  return a.get_time() > b.get_time();
}

edge_set edge_in_use;
long sim_time;
gsl_rng *r;

void sim(Graph *G, UI input, Routes *R, next_hop hop, Policy P){
  DEBUGE("SIM:: \n");

  /* Set up PSNG! */
  gsl_rng_env_setup();
  r = gsl_rng_alloc(gsl_rng_mt19937);

  edge_iter ei, ei_end;
  for (boost::tie(ei, ei_end) = edges(*G); ei != ei_end; ++ei){
    std::pair<int,int> edge_pair(source(*ei,*G),target(*ei,*G));
    edge_in_use.insert( std::make_pair(edge_pair,0) );
    DEBUGE("Mapping: Source: %d Dest: %d\n",edge_pair.first, edge_pair.second);
  }

  // Statement to modify link capacity
  //(*G)[boost::edge(0,9,*G).first].capacity = 10;  
  

  /* In this segment of code, I will also handle the policy arrangements */
  switch(P->get_policy()){
    case 0: // Undefined.
      fprintf(stderr, "Data Policy was not set correctly, exiting\n");
      exit(2);
      break;
    case 1: // Single Server
      /********************* POLICY *****************/
      //last node will be destination node. Read Single Server notes.
      // We also subtract another 1 BECUASE OFF BY 1, VERTS START @@ 0 NOT 1
      input->set_vertices(input->get_vertices()-2);  
      if (input->get_vertices() == 1){ //make sure that given this policy, more than 1 node
        fprintf(stderr, "Single Server Policy not usable in 1 vertex graph.\n");
        exit(3);
      }
      /***************** END POLICY *****************/
      
      // This will allow the request generator naively choose sources
      // While still allowing there to be a global destination.
      single_server(G,input,R, hop);
      break;
    case 2:
    case 3:
      break;
    //....
    default:
      break;
  }
}


void single_server(Graph *G, UI input, Routes *R, next_hop hop){
  DEBUGE("single server\n");

  //set up simulation variables
  sim_time = 0; //global time of simulation
  long label = 0; //track # of unique objects

  //set up active and completed containers for requests.
  //std::priority_queue<AR> active;
  std::vector<AR> *active = new vector<AR>;
  std::priority_queue<AR> finished; // # of pulls finished
  std::set<long> completed; //set of labels avaliable to be pulled
  
  //get new request only generates push requests

  AR *last_AR = new AR;

  Request new_req;// = new request; //= get_new_request(&label, input, completed);
  new_req = new request;
  new_req = get_new_request(&label, input, completed);
  new_req->set_dest((input->get_vertices()+1)); //set dest to global destination
  new_req->set_time(0);
  //print_request(new_req);

  //Main loop: while we have not completed all requests, keep going!
  while((long)finished.size() != input->get_pulls()){ 


    DEBUGE("single server in loop\n");
    AR ar;
    //do the new request - otherwise segfault =P
    if (active->empty()){
      ar = fulfil(G, R, new_req, active,hop);
      DEBUGE("After Fulfil\n");
      print_active(ar);
      active->push_back(ar);

      new_req = get_new_request(&label, input, completed);
      new_req->set_dest((input->get_vertices()+1));
    } else {
      //do the new request
      if ( active->front()->get_etoc() > new_req->get_time()){
        DEBUGE("Before Fulfil\n");
        sim_time = new_req->get_time();
        ar = fulfil(G, R, new_req, active,hop);
        active->push_back(ar);

        new_req = get_new_request(&label, input, completed);
        new_req->set_dest((input->get_vertices()+1));
    
      } 
      // do active request
      else if ( active->front()->get_etoc() < new_req->get_time() ){
        DEBUGE("Before Removing Request\n");
        sim_time = active->front()->get_etoc();
        last_AR = &active->front();
        rm_req(G,R,&(active->front()), active, &finished, &completed);
      } 
      // do both
      else {
        sim_time = new_req->get_time();
        last_AR = &active->front();
        rm_req(G,R,&(active->front()), active, &finished, &completed);
        ar = fulfil(G, R, new_req, active,hop);
        active->push_back(ar);

        new_req = get_new_request(&label, input, completed);
        new_req->set_dest((input->get_vertices()+1));
      }
    }

    //remove warning for set not used, not at that point yet
    if (last_AR != NULL);

    // Not necessarily the next event, but just to have an idea
    //print_active(active->front());
    
    fprintf(stdout,"\n");
    fprintf(stdout,"SIM OUTPUT:\n");
    fprintf(stdout,"\t Time: %ld\n", sim_time);
    fprintf(stdout,"\t Pulls Needed: %ld - Completed Pulls: %zu - Objects Completed: %zu\n\n", 
          input->get_pulls(),finished.size(), completed.size());
    sort(active->begin(), active->end()); // sort based on etoc
#ifdef PRINT_DEBUG
    DEBUGO("Acitive Flow List: \n");
    std::vector<AR>::iterator it;
    for (it = active->begin(); it < active->end(); it++){
      print_active(*it);
    }
#endif
    //break;
  }
  
}

Request get_new_request(long *label, UI in,std::set<long> completed){
  DEBUGE("get new request\n");
  //int nr = in->get_requests(); //# of requests
  int seed = in->get_seed(); //random seed
  int verts = in->get_vertices(); //vertices in graph
  //Need to invert the pr value to get intended value, not pull value
  //float pr = (1-in->get_pushrate()); //% of pushes
  double td = in->get_timedelta(); //time dist delta
  int size_in = in->get_size();

  /* Setting up the random number generator*/
  srand(seed);

  int size = Poisson((double)size_in);
  //int choose = UniformD(0,(int)completed.size());
  int source = UniformD(0,verts);
  Request new_req = new request;
  
  /* Because the simulation is relative to the first request, we can
   * arbrarily set the first requests time = 0, and base all other requests
   * from time = 0;

   * Must enfore a Push before Pull policy by forcing the first
   * Type to be a push, then use the binomial distrubtion for
   * n-1 requests.
   */
  if (sim_time == 0){
    new_req->set_type(0); //push
    new_req->set_source(source); //random source
    new_req->set_label(*label); //name of object = 0
    new_req->set_dest(-1); //set dest = -1, let function set on policy
    new_req->set_size(size);
    //label++;
  } 
  // For all labels after the first label
  else {
    new_req->set_source(source); //random source
    int time = sim_time;
    time += (long)abs(Exponential(td));
    new_req->set_time(time);
    new_req->set_dest(-1);
    if ((*label) < in->get_objects()){
      (*label)++; // cant make this into the next statement, c++ syntax no likey
      new_req->set_label((*label));
      new_req->set_type(0);
    } else {
      new_req->set_label((*label));
      new_req->set_type(1);
    }
    new_req->set_size(size);
  }
  DEBUGE("Lab value: %ld\n", *label);
  return new_req;
}

/* Fulfil will handle new requests.
 *
 *
*/

AR fulfil(Graph *G, Routes *route, Request req, std::vector<AR> *actives, next_hop hop){
  //DEBUG("fulfil\n");
  AR c_ar = new active_request; //current active request
  c_ar->set_req(req);

  paths *path_taken = new paths; // now that its a pointer, need to alloc mem for it

  /* COMMENT OUT -> REQUIRE CHANGE FROM NODE_HOP TO NEXT_HOP TYPE !!!!!!!
  int source = req->get_source();
  int dest = req->get_dest();

  int node = source;


  // source node has a next hop to the destination node.
  if ((int)hop[source] == source){ 
    std::pair<int,int> p(source,dest);
    path_taken->push_back(p);
  } else {
  */
    /* While the current node != dest, keep walking the tree.
     * Possible Infinite Loop here if the routing protocol creates a loop
     * In the graph.
    */
  /*
    while ((int)hop[node] != node){
      std::pair<int,int> p(node,(int)hop[node]);
      path_taken->push_back(p);
      node = (int)hop[node]; //set up node for next hop
    }
    //std::pair<int,int> p(node,dest);
    //path_taken.push_back(p);
  }

  print_path(path_taken);

  // The 1 means that we are adding a request to the current set
  manage_paths(G, &c_ar,*path_taken, actives,1);
  */

  DEBUGE("After Manage Paths\n");  

  c_ar->set_tcre(req->get_time());
  c_ar->set_lupd(req->get_time());
  c_ar->set_pop(0);
  c_ar->set_path(path_taken);
  print_path( c_ar->get_path());
  c_ar->set_req(req);
  //print_active(c_ar);
  return c_ar;

}

void rm_req(Graph *G, Routes *ro, AR *out, std::vector<AR> *actives,
            std::priority_queue<AR> *fin, std::set<long> *comp){
  actives->erase(actives->begin()); // pop the top element off actives list
  manage_paths(G, out, (*(*out)->get_path()), actives,0);
  (*out)->set_tcom(sim_time);
  if ((*out)->get_req()->get_type() == 0){ // check if push or pull
    comp->insert((*out)->get_req()->get_label()); //insert label into completed set
    DEBUGE("Added Label to set\n");
  } else {
    fin->push(*out);
  }
  DEBUGE("Finished Removing Request\n");
}
/*
 * Manage Paths will be the work-horse / bottle neck of the simulation
 * It is designed to actually do the modifications to the links and requests
 * Run time will be based off:
 * # of links used * # of requests on link * ( # of links used on req * # of links
 * Worst case scenario: Modifies every request and entire graph
 * O(n^2)*O(reqs) => Graph links * requests
*/

// Statement to modify link capacity
//(*G)[boost::edge(0,9,*G).first].capacity = 10;  
void manage_paths(Graph *G, AR *a, paths p, std::vector<AR> *actives, int add){
  DEBUGE("Manage Paths\n");
  paths::iterator it;
  double bottleneck = DBL_MAX;
  for (it = p.begin(); it != p.end(); ++it){
    if (edge_in_use.find(*it) != edge_in_use.end()){ // if we find the edge is in use
      int num_in_use;
      if (add==1){
        (*a)->set_dt(0); // set the new request to have set 0 data so far
        edge_in_use[*it] += 1;
        num_in_use = edge_in_use[*it];
        DEBUGO("in use: %d\n", num_in_use);
      } else {
        num_in_use = edge_in_use[*it]--;
      }
      //grab the link from graph (edge_desc, bool) pair, want just edge
      // Then get the link itself by giving the graph the edge_desc
      edge_info prop = (*G)[boost::edge(it->first,it->second,*G).first];  
      double link_capacity = prop.capacity; // # size of the link
      double shared_cap = link_capacity/num_in_use; 
      // Calculate what the new bottleneck would be with this request on the link
      // The bottleneck needs to be set as the lesser of the two values
      if ( shared_cap < bottleneck) bottleneck = shared_cap;
    }
  }
  DEBUGO("Bottleneck: %f\n", bottleneck);
  /* Will now have the bottleneck set, we will then use that bottle neck
   * value for all of the links this request is going to use
  */
 
  if (add){
    for (it = p.begin(); it != p.end(); ++it){
      adjust_paths(G,*it,actives);
      //(*G)[boost::edge(it->first,it->second,*G).first].capacity -= bottleneck;  
    }
  } else {
    for (it = p.begin(); it != p.end(); ++it){
      adjust_paths(G,*it,actives);
      //(*G)[boost::edge(it->first,it->second,*G).first].capacity += bottleneck;  
    }
  }
  DEBUGE("After Adjust Paths\n");
  
  (*a)->set_bb(bottleneck);
  long ttc = (long)ceil((*a)->get_req()->get_size()/bottleneck);// Time until completion
  ttc += sim_time; //add the time from now till it ends
  (*a)->set_etoc(ttc);
  (*a)->set_tcom(0);

  DEBUGE("End of Manage Paths\n");
}

/* Adjust Paths will modify all existing requests, based on the
 * request that just came in.
*/

void adjust_paths(Graph *G, std::pair<int,int> p, std::vector<AR> *actives){
  DEBUGE("In adjust Paths\n");
  vector<AR>::iterator it;
  std::vector<AR> chg_req;
  /* For each request, check if it has any common links with the one the current
   * request wants to use.  If it does, add it to the change request vector.
   */
  for (it = actives->begin(); it != actives->end(); ++it){
    paths *path_taken = (*it)->get_path();
    paths::iterator pt;
    for (pt = path_taken->begin(); pt != path_taken->end(); ++pt){
      std::pair<int,int> p2(pt->first,pt->second);
      if (p == p2){ // if they paths are the same, hoping c++ equality operator works
        chg_req.push_back(*it); // add to the change request vectors
      }
    }
  }

  vector<AR>::iterator jt;
  paths::iterator pit;
  double bottleneck = DBL_MAX; // now we have to change flows if need, set bneck
  // iterator through each request
  for (jt = chg_req.begin(); jt != chg_req.end(); ++jt){
    paths *path_taken = (*jt)->get_path(); //get each link that they use
    // For each link, compute what the bottleneck limitations should be (1/n)
    for (pit = path_taken->begin(); pit != path_taken->end(); ++pit){
      /* This line works because in manage paths, if we set that we were adding
       * a request to the path, we incremented the value, if we were removing
       * a request from the link, we subtracted, so here we are just getting
       * value and generically re-computing values
      */
      int num_in_use = edge_in_use[*pit]; 
      if (num_in_use == 0) break; // if it is now an empty link, dont divide by 0

      edge_info prop = (*G)[boost::edge(pit->first,pit->second,*G).first];  
      double link_capacity = prop.capacity; // # size of the link
      double shared_cap = link_capacity/num_in_use; // 1 / # of reqs on link
      if ( shared_cap < bottleneck) bottleneck = shared_cap; // set as bottle
    }

    int dt = (*jt)->get_dt(); // get the current data transfered so far
    // get the time that the req has run at this rate.
    long time_ran = sim_time - (*jt)->get_lupd();
    // add the amount that we just transfered
    dt += (int)(floor(time_ran*(*jt)->get_bb()));
    (*jt)->set_dt(dt); // set that as our current transfered

    // Now compute the etoc:
    // Size of total obj - size transftered so far / by our transmission rate
    long ttc = (long)ceil( ( (*jt)->get_req()->get_size() - (long)dt ) / bottleneck);
    
    (*jt)->set_bb(bottleneck); //set new bottleneck speed
    (*jt)->set_etoc(sim_time+ttc); // set the time request should complete
    (*jt)->set_lupd(sim_time); // set last update time to now
  }
}
@


1.10
log
@8/23/12
@
text
@a31 1
//std::set<std::pair<std::pair<int, int>,int> > edge_used;
@


1.9
log
@8-7-12
Fixed a set not used statement, but need to eventually use it
@
text
@d26 6
d38 1
a38 1
  DEBUG("SIM:: \n");
d48 1
a48 1
    DEBUG("Mapping: Source: %d Dest: %d\n",edge_pair.first, edge_pair.second);
d87 1
a87 1
  DEBUG("single server\n");
d114 1
a114 1
    DEBUG("single server in loop\n");
d119 1
a119 1
      DEBUG("After Fulfil\n");
d128 1
a128 1
        DEBUG("Before Fulfil\n");
d139 1
a139 1
        DEBUG("Before Removing Request\n");
d161 1
a161 1
    print_active(active->front());
d163 4
a166 4
    fprintf(stderr,"\n");
    fprintf(stderr,"SIM OUTPUT:\n");
    fprintf(stderr,"\t Time: %ld\n", sim_time);
    fprintf(stderr,"\t Pulls Needed: %ld - Completed Pulls: %zu - Objects Completed: %zu\n\n", 
d169 7
d182 1
a182 1
  DEBUG("get new request\n");
d232 1
a232 1
  //DEBUG("Lab value: %ld\n", *label);
d242 1
a242 1
  DEBUG("fulfil\n");
d246 3
a251 1
  paths *path_taken = new paths; // now that its a pointer, need to alloc mem for it
d254 1
d260 1
d265 1
d279 1
d281 1
a281 1
  DEBUG("After Manage Paths\n");  
d301 1
a301 1
    DEBUG("Added Label to set\n");
d305 1
a305 1
  DEBUG("Finished Removing Request\n");
d319 1
a319 1
  DEBUG("Manage Paths\n");
d329 1
a329 1
        DEBUG("in use: %d\n", num_in_use);
d343 1
a343 1
  DEBUG("Bottleneck: %f\n", bottleneck);
d359 1
a359 1
  DEBUG("After Adjust Paths\n");
d367 1
a367 1
  DEBUG("End of Manage Paths\n");
d375 1
a375 1
  DEBUG("In adjust Paths\n");
@


1.8
log
@8-3-12
NO CHANGE, JUST COPYING
@
text
@d151 3
@


1.7
log
@6/27/12
Single Server version is working (?)
Obviously there will be a lot of tweeks, but this version
isnt segfaulting or erroring, completes simulation, and results
look correct
@
text
@d95 1
d98 6
d106 2
a107 4
    new_req = new request;
    new_req = get_new_request(&label, input, completed);
    new_req->set_dest((input->get_vertices()+1)); //set dest to global destination
    print_request(new_req);
a111 1
      //sim_time = new_req->get_time();
d116 3
d126 4
d135 1
d141 1
d145 3
d150 8
a157 3
    DEBUG("SIMULATOR OVERHEAD:\n");
    DEBUG("\t Time: %ld\n", sim_time);
    DEBUG("\t Pulls Needed: %ld - Completed Pulls: %zu - Objects Completed: %zu\n", 
d179 1
a192 1
    new_req->set_time(sim_time); //start @@ t=0
a196 1
    sim_time = 1; // after we generate a request, need to set time != 0
d211 1
d216 1
a216 1
  DEBUG("Lab value: %ld\n", *label);
d279 1
a279 1
    DEBUG("Added Label to set");
a299 1
  DEBUG("Path 1.1: %d\n", (*p.begin()).first);
d304 1
a343 1
  (*a)->set_dt(0);
@


1.6
log
@7/26/12
Working on getting entire simulation built, in a state of chaos
@
text
@a21 4
//#include "bgl_graph_info.hpp"
//#include "types.hpp"
//#include "routing.hpp"
//#include "randvars2.hpp"
d29 1
d34 11
d58 2
a59 1
      input->set_vertices(input->get_vertices()-1);  
a78 1
gsl_rng *r;
d89 1
a89 1
  std::vector<AR> active;
d96 1
d99 2
a100 1
    Request new_req = get_new_request(label, input, completed);
d102 10
a111 8
    sort(active.begin(), active.end()); // sort based on etoc
    //print_request(new_req);
    DEBUG("after sort in single server\n");
    //do the new request
    /*
    if (active.front()->get_etoc() > new_req->get_time()){
      AR ar = fulfil(R, new_req, &active,hop);
      active.push_back(ar);
d113 19
a131 3
      if (new_req->get_time() == active.front()->get_etoc()){
        AR ar = fulfil(R, new_req, &active,hop);
        active.push_back(ar);
d134 6
a139 2
    */
    break;
d144 1
a144 1
Request get_new_request(long label, UI in,std::set<long> completed){
d152 1
a154 2
  gsl_rng_env_setup();
  r = gsl_rng_alloc(gsl_rng_mt19937);
d156 3
a158 1
  
a171 1
    int source = UniformD(0,verts);
d173 1
a173 1
    new_req->set_label(label); //name of object = 0
d175 3
a177 1
    label++;
a180 1
    int source = UniformD(0,verts);
d182 3
a184 2
    sim_time += (long)abs(Exponential(td));
    new_req->set_time(sim_time);
d186 8
a193 2
    new_req->set_type(0);
    new_req->set_label(label++);
d195 1
d207 1
d212 1
a212 1
  paths path_taken;
d218 1
a218 1
    path_taken.push_back(p);
d226 1
a226 1
      path_taken.push_back(p);
d229 2
a230 2
    std::pair<int,int> p(node,dest);
    path_taken.push_back(p);
d233 2
d236 4
a239 2
  manage_paths(G, &c_ar,path_taken, actives,1);
  
d244 1
d246 1
a246 1

d251 13
d276 1
d279 1
d283 4
a286 2
      if (add){
        num_in_use = edge_in_use[*it]++;
d300 1
d316 1
d320 1
d325 1
d333 1
d340 1
a340 1
    paths path_taken = (*it)->get_path();
d342 1
a342 1
    for (pt = path_taken.begin(); pt != path_taken.end(); ++pt){
d355 1
a355 1
    paths path_taken = (*it)->get_path(); //get each link that they use
d357 1
a357 1
    for (pit = path_taken.begin(); pit != path_taken.end(); ++pit){
@


1.5
log
@7/23/12
In the process of moving the contents of gen_req to simulation.cc
in order to reduce time/speed efficency of generating requests
@
text
@d4 2
a5 1
#include <limits.h>
d19 1
a20 3
#include "types.hpp"
#include "routing.hpp"
#include "bgl_graph_info.hpp"
d22 4
a25 1
#include <gsl/gsl_rng.h>
d30 10
a39 1
void sim(Graph G, UI input, Routes *R, Policy P){
d41 1
d48 9
d59 1
a59 2
      // input->set_vertices((input->get_vertices-1)); //already done in main
      single_server(G,input,R);
d72 2
a73 1
void single_server(Graph G, UI input, Routes *R){
d76 1
a76 1
  long time = 0; //global time of simulation
a77 1
  //long counter = 0; //track # of created requests
d80 4
a83 2
  std::priority_queue<AR> active;
  std::priority_queue<AR> completed;
d85 2
a86 2
  Request ar = get_new_request(time, label, input);
  ar->set_dest((input->get_vertices()+1)); //set dest to global destination
d89 19
a107 1
  while((long)completed.size() != input->get_requests()){ 
d112 2
a113 1
Request get_new_request(long time, long label, UI in){
d118 1
a118 1
  float pr = (1-in->get_pushrate()); //% of pushes
d136 1
a136 1
  if (time == 0){
d138 3
a140 2
    new_req->set_time(time); //start @@ t=0
    new_req->set_source((rand() % verts)); //random source
d143 1
a143 1
    //label++; //let this function modify the # of labels, after each push,inc.
d147 34
a180 10
    int type = Binomial(1,pr); // Here we need to choose from global completed
    //int source = rand() % verts;
    new_req->set_type(type); 

    if (type == 0){ //pushing a new object
      new_req->set_label(label++);
    }
    /* 
     * This will eventually need to use some some distribution
     * for the number of pulls per object.
d182 4
a185 2
    else { //pulling a previous object
      new_req->set_label(rand() % label);
d187 130
a316 4
    new_req->set_type(type);
    time += (long)abs(Exponential(td));
    new_req->set_time(time);
    new_req->set_dest(-1);
a317 1
  return new_req;
@


1.4
log
@changed to pointers for routes
@
text
@d11 3
d23 1
d28 1
a28 1
void sim(Graph G, Request r, Routes *R, Policy P){
a29 10
#ifdef PRINT_DEBUG
  graph_traits<Graph>::vertex_iterator vi, vend;
  for (int i = 0; i < (int)num_vertices(G); i++){ // if verts in graph > 32767, overflow negative
    DEBUG("Node %d | Distance\n", i);
    vector<double> distances = (*R)[i];
    for (boost::tie(vi,vend) = vertices(G); vi != vend; ++vi){
      DEBUG("distance(%s) = %f\n",G[*vi].name.c_str(),distances[*vi]);
    }
  }
#endif
d36 4
a39 1
      single_server(G,r,R);
d50 3
a52 1
void single_server(Graph G, Request r, Routes *R){
d54 71
@


1.3
log
@7/20/12
No change //commented out a line
@
text
@d1 14
d16 2
d19 35
a53 1
#include "types.hpp"
a54 3
void sim(Graph g, Request r, Routes R){
  //int time = 0;
  
@


1.2
log
@*** empty log message ***
@
text
@d6 1
a6 1
  int time = 0;
@


1.1
log
@Initial revision
@
text
@d1 8
@
