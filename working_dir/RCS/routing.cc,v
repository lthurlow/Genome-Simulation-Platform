head	1.11;
access;
symbols;
locks
	lthurlow:1.11; strict;
comment	@// @;


1.11
date	2012.09.25.22.59.00;	author lthurlow;	state Exp;
branches;
next	1.10;

1.10
date	2012.09.21.23.42.29;	author lthurlow;	state Exp;
branches;
next	1.9;

1.9
date	2012.08.31.05.39.36;	author lthurlow;	state Exp;
branches;
next	1.8;

1.8
date	2012.08.23.20.40.24;	author lthurlow;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.07.19.20.26;	author lthurlow;	state Exp;
branches;
next	1.6;

1.6
date	2012.07.27.00.02.06;	author lthurlow;	state Exp;
branches;
next	1.5;

1.5
date	2012.07.20.17.51.45;	author lthurlow;	state Exp;
branches;
next	1.4;

1.4
date	2012.07.20.17.18.19;	author lthurlow;	state Exp;
branches;
next	1.3;

1.3
date	2012.07.20.05.58.00;	author lthurlow;	state Exp;
branches;
next	1.2;

1.2
date	2012.07.19.21.46.35;	author lthurlow;	state Exp;
branches;
next	1.1;

1.1
date	2012.07.09.22.56.42;	author lthurlow;	state Exp;
branches;
next	;


desc
@@


1.11
log
@9/25/12
Cleaned up code - submittable
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <limits.h>
#include <string>
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <set>
#include <boost/tuple/tuple.hpp>
#include <boost/graph/graphviz.hpp>
#include <boost/graph/dijkstra_shortest_paths.hpp>
#include <boost/lexical_cast.hpp>

#include "routing.hpp"

using namespace std;
using namespace boost;


/* build forwarding tables does what it sounds like it does.  It takes in
 * the BGL Graph + Routes and a Routing Algorithm, and returns a next-hop
 * list for every node to every other node based on the algorithm given.
*/
next_hop build_forwarding_tables(Graph G, int route, Routes *R){
  DEBUGE("Building Tables\n");
  switch(route){
    case 1:
      return ospf(G,R);
      break;
    case 2: //bellman-ford?
    case 3: //multipath?
      DEBUGE("Non Implemented Routing Algorithms");
      exit(1);
      break;
  }
  next_hop null(1);
  return null;
}


next_hop ospf(Graph G, Routes *R){
  print_graph(G);  //verify graph is correct

  graph_traits<Graph>::vertex_iterator vi, vend;
  int verts = num_vertices(G);
  next_hop H(verts, std::vector<vertex_descriptor>(verts));
  node_hop parent(verts);

  for (boost::tie(vi,vend) = vertices(G); vi != vend; ++vi){
    vertex_descriptor s = *vi;
    int node = boost::lexical_cast<int>(G[*vi].name);

  /*
  *  Run Dijkstra's, need to pass in the graph, the node to run dijkstra's
  *  from, and pass in the weight map that will get converted into a distance
  *  map.
  */
    Graph G_copy(num_vertices(G));

    //weight map and predecessor maps are define in BGL, use a unique version which
    //uses my structures and builds the next-hop data structure.
    boost::dijkstra_shortest_paths (G,s, 
    weight_map(get(&edge_info::weight,
               G)).distance_map(make_iterator_property_map((*R)[node].begin(),
               get(vertex_index, G))).
    predecessor_map(make_iterator_property_map((H)[node].begin(), 
               get(vertex_index, G), (((H)[node])[0]) )).
    visitor(make_dijkstra_visitor(copy_graph(G_copy, on_examine_edge()))));

  }

/* TURN ON TO VERIFY GRAPH

  for (int src=0; src < (int)num_vertices(G); src++){
    for (int dest=0; dest < (int)num_vertices(G); dest++){
      DEBUGE("Next hop from: %d to get to: %d is ::  %d\n", src, dest, (H)[src][dest]);
    }
  }
  DEBUGE("After Dij\n"); 
  // Verify that dijkstra is working, print distance from each node.
  //SHRT_MAX defn in limits.h = 32767
#ifdef PRINT_DEBUG
  for (int i = 0; i < (int)num_vertices(G); i++){ // if verts in graph > 32767, overflow negative
    DEBUGE("Node %d | Distance\n", i);
    vector<double> distances = (*R)[i];
    for (boost::tie(vi,vend) = vertices(G); vi != vend; ++vi){
      DEBUGE("distance(%s) = %f\n",G[*vi].name.c_str(),distances[*vi]);
    }
  }
#endif
*/

  return H;

}
@


1.10
log
@9/21/12
@
text
@d21 5
d34 2
a47 1
  //std::vector<vertex_descriptor> parent(num_vertices(G));
a53 3
    //DEBUG("Name: %d\n", node); 
   

d62 2
d74 1
a74 4
/* 

TURN ON TO VERIFY GRAPH

a80 1

a81 1

a82 1

@


1.9
log
@8/30/12
Allows more user input
@
text
@a16 2
//#include "bgl_graph_info.hpp"
//#include "types.hpp"
@


1.8
log
@8/23/12
@
text
@d69 5
a73 17
    /*
    boost::dijkstra_shortest_paths (G,s, 
    weight_map(get(&edge_info::weight,
               G)).distance_map(make_iterator_property_map((*R)[node].begin(),
               get(vertex_index, G))).
    predecessor_map(make_iterator_property_map(parent.begin(), 
               get(vertex_index, G), parent[0])).
    visitor(make_dijkstra_visitor(copy_graph(G_copy, on_examine_edge()))));
    */
    //for (int dest=0; dest < (int)num_vertices(G); dest++){
    //  DEBUGE("Next hop from: %d to get to: %d is ::  %d\n", node, dest, parent[dest]);
    //}

/*
    dijkstra_shortest_paths(G,s,weight_map(get(&edge_info::weight,
               G)).distance_map(make_iterator_property_map((*R)[node].begin(),
               get(vertex_index, G))));
a74 2
*/
  }
a75 1
  
d78 1
a78 1
      DEBUGE("Next hop from: %d to get to: %d is ::  %d\n", src, dest, (H)[src][dest]);//parent[dest]);
d96 1
@


1.7
log
@8-7-12
Fixed c++ warning on ubuntu for size of int printf statement
@
text
@d24 1
a24 1
  DEBUG("Building Tables\n");
d42 1
d44 2
a45 1
  next_hop parent(num_vertices(G));
d60 10
d77 4
a80 2

    DEBUG("Next hop from: %d to get to: 9 is ::  %d\n", node, parent[num_vertices(G)-1]);
d90 8
a97 1
  DEBUG("After Dij\n"); 
d104 1
a104 1
    DEBUG("Node %d | Distance\n", i);
d107 1
a107 1
      DEBUG("distance(%s) = %f\n",G[*vi].name.c_str(),distances[*vi]);
d112 1
a112 1
  return parent;
@


1.6
log
@7/26/12
no change
@
text
@d66 1
a66 1
    DEBUG("Next hop from: %d to get to: 9 is ::  %ld\n", node, parent[num_vertices(G)-1]);
@


1.5
log
@changed to pointers for routes
@
text
@a15 1
#include "types.hpp"
d17 2
a18 1
#include "bgl_graph_info.hpp"
d23 1
a23 1
void build_forwarding_tables(Graph G, int route, Routes *R){
d27 1
a27 1
      ospf(G,R);
d33 2
d38 1
a38 1
void ospf(Graph G, Routes *R){
a39 4
  std::vector<vertex_descriptor> parent(num_vertices(G)); // To store parentes
  for (size_type p = 0; p < num_vertices(G); ++p){
     parent[p] = p;
  }
d42 3
d48 4
a51 1
    
d57 12
a68 1
    
d72 2
d76 1
a80 4
  if (num_vertices(G) > SHRT_MAX){
    fprintf(stderr,"Vertices > MAX_INT range, overflow and crash expected!\n");
    exit(3);
  }
d91 2
@


1.4
log
@7/20/12
Should have every nodes distance calculation done
Now able to walk the tree based on static conditional weights
@
text
@d23 1
a23 1
void build_forwarding_tables(Graph G, int route, Routes R){
d36 1
a36 1
void ospf(Graph G, Routes R){
d55 1
a55 1
               G)).distance_map(make_iterator_property_map(R[node].begin(),
d65 1
d67 1
d70 1
a70 1
    vector<double> distances = R[i];
d75 1
@


1.3
log
@*** empty log message ***
@
text
@d4 1
a38 2
  //std::vector<double> distances(num_vertices(G));
  //std::vector<int> distances(boost::num_vertices(G)); // To store distances
a42 3
  //vertex_descriptor s = *(vertices(G).first); //first node in graph, 0

  DEBUG("HERE 1\n"); //seg fault in here
a46 1
    //G[node].name = "aab";
a47 8
    DEBUG("HERE 1.5\n"); //seg fault in here
    dijkstra_shortest_paths(G,s,weight_map(get(&edge_info::weight,
               G)).distance_map(make_iterator_property_map(R[node].begin(),
               get(vertex_index, G))));
  }

  DEBUG("HERE 2\n");

d53 4
a56 10
  //dijkstra_shortest_paths(G,s,weight_map(get(&edge_info::weight,
  //             G)).distance_map(make_iterator_property_map(distances.begin(), 
  //             get(vertex_index, G))));

  // Verify that dijkstra is working, print distance from each node.
  DEBUG("Node 0 | Distance\n");
  vector<double> distances = R[0];
  //graph_traits<Graph>::vertex_iterator vi, vend;
  for (boost::tie(vi,vend) = vertices(G); vi != vend; ++vi){
    DEBUG("distance(%s) = %f\n",G[*vi].name.c_str(),distances[*vi]);
a58 4
  DEBUG("HERE 4\n");



d60 1
d62 9
a70 9

  // This function is currently the problem, need to find a way that I can call dijkstra's
  //dijkstra_shortest_paths(G,s,predecessor_map(&parent[0]).distance_map(&distances[0]));
  /*
  edge_desc e;
  for (size_type p = 0; p < num_vertices(G); ++p){
    if (parent[i] != i){
      e = edge(parent[i],i,g_dot).first;
      edge_attr_map[e]["color"] = "black";
a72 24
  */
  
  /*
  ofstream routetable("route-table.dat");
  routetable << "Dest    Next Hop    Total Cost" << endl;
  boost::graph_traits<Graph>::vertex_descriptor vi,vi_end;
  for (tie(vi,vi_end) = vertices(G); vi != vi_end; ++vi){
    if (parent[*vi] != *vi){
      routetable << vertex_attr_map[*vi]["label"] << "    ";
      vert_desc v = *vi, child;
      int path_cost = 0;
      property_map<Graph, edge_weight_t>type weight_map = get(edge_weight, G);
      do{
        path_cost += get(weight_map, edge(parent[v],v,G).first);
        child = v;
        v = parent[v];
      } while (v != parent[v]);
      routetable << vertex_attr_map[child]["label"] << "    ";
      routetable << path_cost << endl;
        
    }
  }
  */

@


1.2
log
@7/19/12
I think I have dijkstra working.
@
text
@d22 1
a22 1
void build_forwarding_tables(Graph G, int route){
d26 1
a26 1
      ospf(G);
d35 1
a35 1
void ospf(Graph G){
d38 1
a38 1
  std::vector<double> distances(num_vertices(G));
d44 17
a60 2
  vertex_descriptor s = *(vertices(G).first); //first node in graph, 0
 
d66 3
a68 3
  dijkstra_shortest_paths(G,s,weight_map(get(&edge_info::weight,
                          G)).distance_map(make_iterator_property_map(distances.begin(), 
                          get(vertex_index, G))));
d71 3
a73 2
  DEBUG("Node | Distance\n");
  graph_traits<Graph>::vertex_iterator vi, vend;
d78 7
@


1.1
log
@Initial revision
@
text
@a21 1

a25 2
    case 2:
    case 3:
d28 3
d34 1
d36 60
a95 1
  print_graph(G); 
@
